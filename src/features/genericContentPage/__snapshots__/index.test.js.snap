// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<GenericContent/> renders with default values 1`] = `
<p
  key="0"
>
  Hello world!
</p>
`;

exports[`render methods for Generic Content click on typeform button 1`] = `
.c1 {
  box-sizing: border-box;
  padding: 12px 35px;
  border-radius: 4px;
  border: none;
  display: inline-block;
  text-align: center;
  color: #2D2F7F;
  background-color: #2CDA9D;
  font-family: Poppins,sans-serif;
  font-weight: 700;
  font-size: 1.125rem;
  line-height: 1.388;
  min-width: 250px;
  width: auto;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-align: center;
  -webkit-transition: background-color 0.15s linear;
  transition: background-color 0.15s linear;
}

.c1:hover {
  background-color: #1fb480;
}

.c1:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.c0 {
  margin-bottom: 1.25em;
}

@media (min-width:768px) {
  .c1 {
    width: auto;
  }
}

<span>
  <ReactTypeformEmbed
    autoClose={5}
    autoOpen={false}
    buttonText="Start"
    hideFooter={true}
    hideHeaders={true}
    mode="drawer_left"
    onSubmit={[Function]}
    opacity={100}
    popup={true}
    style={
      Object {
        "zIndex": -1,
      }
    }
    url="https://prideinlondon.typeform.com/to/Z3WuCL"
  >
    <div
      className="ReactTypeformEmbed"
      style={
        Object {
          "height": "100%",
          "left": 0,
          "overflow": "hidden",
          "position": "absolute",
          "top": 0,
          "width": "100%",
          "zIndex": -1,
        }
      }
    />
  </ReactTypeformEmbed>
  <renderMethods__StyledButton
    onClick={[Function]}
    primary={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "renderMethods__StyledButton-sc-1003i2d-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "margin-bottom:1.25em;",
            ],
          },
          "displayName": "renderMethods__StyledButton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "renderMethods__StyledButton-sc-1003i2d-0",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      onClick={[Function]}
      primary={true}
    >
      <Button
        className="c0"
        disabled={false}
        flexwidth={false}
        fullmobile={false}
        link={false}
        onClick={[Function]}
        primary={true}
        small={false}
        to={null}
        type="button"
        white={false}
        wide={true}
      >
        <button__StyledButton
          className="c0"
          disabled={false}
          flexwidth={false}
          fullmobile={false}
          onClick={[Function]}
          primary={true}
          small={false}
          type="button"
          white={false}
          wide={true}
        >
          <StyledComponent
            className="c0"
            disabled={false}
            flexwidth={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "button__StyledButton-sc-1gywmhy-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "box-sizing:border-box;padding:12px 35px;border-radius:4px;border:",
                    [Function],
                    ";display:inline-block;text-align:center;color:",
                    [Function],
                    ";background-color:",
                    [Function],
                    ";font-family:",
                    "Poppins, sans-serif",
                    ";font-weight:700;font-size:",
                    [Function],
                    ";line-height:1.388;min-width:",
                    [Function],
                    ";width:",
                    [Function],
                    ";cursor:pointer;text-decoration:none;text-align:center;transition:background-color 0.15s linear;&:hover{background-color:",
                    [Function],
                    ";}&:disabled{opacity:0.5;cursor:not-allowed;}",
                    "@media (min-width:",
                    "768",
                    "px){",
                    "
      width: auto;
  ",
                    ";}",
                    ";",
                  ],
                },
                "displayName": "button__StyledButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "button__StyledButton-sc-1gywmhy-0",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            fullmobile={false}
            onClick={[Function]}
            primary={true}
            small={false}
            type="button"
            white={false}
            wide={true}
          >
            <button
              className="c1 c0"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              Button typeform type
            </button>
          </StyledComponent>
        </button__StyledButton>
      </Button>
    </StyledComponent>
  </renderMethods__StyledButton>
</span>
`;

exports[`render methods for Generic Content click on typeform button 2`] = `
.c1 {
  box-sizing: border-box;
  padding: 12px 35px;
  border-radius: 4px;
  border: none;
  display: inline-block;
  text-align: center;
  color: #2D2F7F;
  background-color: #2CDA9D;
  font-family: Poppins,sans-serif;
  font-weight: 700;
  font-size: 1.125rem;
  line-height: 1.388;
  min-width: 250px;
  width: auto;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-align: center;
  -webkit-transition: background-color 0.15s linear;
  transition: background-color 0.15s linear;
}

.c1:hover {
  background-color: #1fb480;
}

.c1:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.c0 {
  margin-bottom: 1.25em;
}

@media (min-width:768px) {
  .c1 {
    width: auto;
  }
}

<span>
  <ReactTypeformEmbed
    autoClose={5}
    autoOpen={false}
    buttonText="Start"
    hideFooter={true}
    hideHeaders={true}
    mode="drawer_left"
    onSubmit={[Function]}
    opacity={100}
    popup={true}
    style={
      Object {
        "zIndex": -1,
      }
    }
    url="https://prideinlondon.typeform.com/to/Z3WuCL"
  >
    <div
      className="ReactTypeformEmbed"
      style={
        Object {
          "height": "100%",
          "left": 0,
          "overflow": "hidden",
          "position": "absolute",
          "top": 0,
          "width": "100%",
          "zIndex": -1,
        }
      }
    />
  </ReactTypeformEmbed>
  <renderMethods__StyledButton
    onClick={[Function]}
    primary={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "renderMethods__StyledButton-sc-1003i2d-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "margin-bottom:1.25em;",
            ],
          },
          "displayName": "renderMethods__StyledButton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "renderMethods__StyledButton-sc-1003i2d-0",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      onClick={[Function]}
      primary={true}
    >
      <Button
        className="c0"
        disabled={false}
        flexwidth={false}
        fullmobile={false}
        link={false}
        onClick={[Function]}
        primary={true}
        small={false}
        to={null}
        type="button"
        white={false}
        wide={true}
      >
        <button__StyledButton
          className="c0"
          disabled={false}
          flexwidth={false}
          fullmobile={false}
          onClick={[Function]}
          primary={true}
          small={false}
          type="button"
          white={false}
          wide={true}
        >
          <StyledComponent
            className="c0"
            disabled={false}
            flexwidth={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "button__StyledButton-sc-1gywmhy-0",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "box-sizing:border-box;padding:12px 35px;border-radius:4px;border:",
                    [Function],
                    ";display:inline-block;text-align:center;color:",
                    [Function],
                    ";background-color:",
                    [Function],
                    ";font-family:",
                    "Poppins, sans-serif",
                    ";font-weight:700;font-size:",
                    [Function],
                    ";line-height:1.388;min-width:",
                    [Function],
                    ";width:",
                    [Function],
                    ";cursor:pointer;text-decoration:none;text-align:center;transition:background-color 0.15s linear;&:hover{background-color:",
                    [Function],
                    ";}&:disabled{opacity:0.5;cursor:not-allowed;}",
                    "@media (min-width:",
                    "768",
                    "px){",
                    "
      width: auto;
  ",
                    ";}",
                    ";",
                  ],
                },
                "displayName": "button__StyledButton",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "button__StyledButton-sc-1gywmhy-0",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            fullmobile={false}
            onClick={[Function]}
            primary={true}
            small={false}
            type="button"
            white={false}
            wide={true}
          >
            <button
              className="c1 c0"
              disabled={false}
              onClick={[Function]}
              type="button"
            >
              Button typeform type
            </button>
          </StyledComponent>
        </button__StyledButton>
      </Button>
    </StyledComponent>
  </renderMethods__StyledButton>
</span>
`;

exports[`render methods for Generic Content renders a Figure component for images 1`] = `
<styles__StyledFigure>
  <img
    alt="Hello World"
    src="src"
  />
  <figcaption>
    Image description
  </figcaption>
</styles__StyledFigure>
`;

exports[`render methods for Generic Content renders a button component if the content is null 1`] = `<span />`;

exports[`render methods for Generic Content renders a button component if the id is button 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "renderMethods__StyledButton-sc-1003i2d-0",
        "isStatic": false,
        "rules": Array [
          "margin-bottom:1.25em;",
        ],
      },
      "displayName": "renderMethods__StyledButton",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "renderMethods__StyledButton-sc-1003i2d-0",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
  primary={true}
  to="https://prideinlondon.org/who-we-are"
>
  Button primary type
</StyledComponent>
`;

exports[`render methods for Generic Content renders a null if the id is not recognized 1`] = `<span />`;

exports[`render methods for Generic Content renders a sponsor section component if the id is sponsorSection 1`] = `
<Fragment>
  <styles__TitleWrapper>
    <styles__Title>
      Test Sponsor Section
    </styles__Title>
  </styles__TitleWrapper>
  <styles__BadgesContainer>
    <SponsorBadge
      key="Virtucon"
      level="Headline"
      logo="//images.ctfassets.net/n2o4hgsv6wcx/2AfZNrit52m4WUm4IKUOOE/21323f2171228d475743a62938778c53/ed2cf58359281c503c8fd2d56992b0a9.png?w=800&h=168&q=90"
      name="Virtucon"
      preventLevelSize={true}
      url="https://m.popkey.co/666ded/1VRvJ.gif"
    />
  </styles__BadgesContainer>
</Fragment>
`;

exports[`render methods for Generic Content renders a typeform button component if the id is button 1`] = `
<span>
  <ReactTypeformEmbed
    autoClose={5}
    autoOpen={false}
    buttonText="Start"
    hideFooter={true}
    hideHeaders={true}
    mode="drawer_left"
    onSubmit={[Function]}
    opacity={100}
    popup={true}
    style={
      Object {
        "zIndex": -1,
      }
    }
    url="https://prideinlondon.typeform.com/to/Z3WuCL"
  />
  <renderMethods__StyledButton
    onClick={[Function]}
    primary={true}
  >
    Button typeform type
  </renderMethods__StyledButton>
</span>
`;

exports[`render methods for Generic Content renders a video component if the id is video 1`] = `
<styles__VideoContainer>
  <iframe
    allowFullScreen={true}
    frameBorder="0"
    src="https://www.youtube.com/embed/7ge36or-nz4"
    title="Youtube video"
  />
</styles__VideoContainer>
`;
